// fuse.js@7.1.0 downloaded from https://ga.jspm.io/npm:fuse.js@7.1.0/dist/fuse.mjs

function isArray(e){return Array.isArray?Array.isArray(e):getTag(e)==="[object Array]"}const e=1/0;function baseToString(t){if(typeof t=="string")return t;let s=t+"";return s=="0"&&1/t==-e?"-0":s}function toString(e){return e==null?"":baseToString(e)}function isString(e){return typeof e==="string"}function isNumber(e){return typeof e==="number"}function isBoolean(e){return e===true||e===false||isObjectLike(e)&&getTag(e)=="[object Boolean]"}function isObject(e){return typeof e==="object"}function isObjectLike(e){return isObject(e)&&e!==null}function isDefined(e){return e!==void 0&&e!==null}function isBlank(e){return!e.trim().length}function getTag(e){return e==null?e===void 0?"[object Undefined]":"[object Null]":Object.prototype.toString.call(e)}const t="Extended search is not available";const s="Incorrect 'index' type";const LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY=e=>`Invalid value for key ${e}`;const PATTERN_LENGTH_TOO_LARGE=e=>`Pattern length exceeds max of ${e}.`;const MISSING_KEY_PROPERTY=e=>`Missing ${e} property in key`;const INVALID_KEY_WEIGHT_VALUE=e=>`Property 'weight' in key '${e}' must be a positive integer`;const n=Object.prototype.hasOwnProperty;class KeyStore{constructor(e){this._keys=[];this._keyMap={};let t=0;e.forEach((e=>{let s=createKey(e);this._keys.push(s);this._keyMap[s.id]=s;t+=s.weight}));this._keys.forEach((e=>{e.weight/=t}))}get(e){return this._keyMap[e]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function createKey(e){let t=null;let s=null;let i=null;let r=1;let c=null;if(isString(e)||isArray(e)){i=e;t=createKeyPath(e);s=createKeyId(e)}else{if(!n.call(e,"name"))throw new Error(MISSING_KEY_PROPERTY("name"));const u=e.name;i=u;if(n.call(e,"weight")){r=e.weight;if(r<=0)throw new Error(INVALID_KEY_WEIGHT_VALUE(u))}t=createKeyPath(u);s=createKeyId(u);c=e.getFn}return{path:t,id:s,weight:r,src:i,getFn:c}}function createKeyPath(e){return isArray(e)?e:e.split(".")}function createKeyId(e){return isArray(e)?e.join("."):e}function get(e,t){let s=[];let n=false;const deepGet=(e,t,i)=>{if(isDefined(e))if(t[i]){let r=t[i];const c=e[r];if(!isDefined(c))return;if(i===t.length-1&&(isString(c)||isNumber(c)||isBoolean(c)))s.push(toString(c));else if(isArray(c)){n=true;for(let e=0,s=c.length;e<s;e+=1)deepGet(c[e],t,i+1)}else t.length&&deepGet(c,t,i+1)}else s.push(e)};deepGet(e,isString(t)?t.split("."):t,0);return n?s:s[0]}const i={includeMatches:false,findAllMatches:false,minMatchCharLength:1};const r={isCaseSensitive:false,ignoreDiacritics:false,includeScore:false,keys:[],shouldSort:true,sortFn:(e,t)=>e.score===t.score?e.idx<t.idx?-1:1:e.score<t.score?-1:1};const c={location:0,threshold:.6,distance:100};const u={useExtendedSearch:false,getFn:get,ignoreLocation:false,ignoreFieldNorm:false,fieldNormWeight:1};var o={...r,...i,...c,...u};const a=/[^ ]+/g;function norm(e=1,t=3){const s=new Map;const n=Math.pow(10,t);return{get(t){const i=t.match(a).length;if(s.has(i))return s.get(i);const r=1/Math.pow(i,.5*e);const c=parseFloat(Math.round(r*n)/n);s.set(i,c);return c},clear(){s.clear()}}}class FuseIndex{constructor({getFn:e=o.getFn,fieldNormWeight:t=o.fieldNormWeight}={}){this.norm=norm(t,3);this.getFn=e;this.isCreated=false;this.setIndexRecords()}setSources(e=[]){this.docs=e}setIndexRecords(e=[]){this.records=e}setKeys(e=[]){this.keys=e;this._keysMap={};e.forEach(((e,t)=>{this._keysMap[e.id]=t}))}create(){if(!this.isCreated&&this.docs.length){this.isCreated=true;isString(this.docs[0])?this.docs.forEach(((e,t)=>{this._addString(e,t)})):this.docs.forEach(((e,t)=>{this._addObject(e,t)}));this.norm.clear()}}add(e){const t=this.size();isString(e)?this._addString(e,t):this._addObject(e,t)}removeAt(e){this.records.splice(e,1);for(let t=e,s=this.size();t<s;t+=1)this.records[t].i-=1}getValueForItemAtKeyId(e,t){return e[this._keysMap[t]]}size(){return this.records.length}_addString(e,t){if(!isDefined(e)||isBlank(e))return;let s={v:e,i:t,n:this.norm.get(e)};this.records.push(s)}_addObject(e,t){let s={i:t,$:{}};this.keys.forEach(((t,n)=>{let i=t.getFn?t.getFn(e):this.getFn(e,t.path);if(isDefined(i))if(isArray(i)){let e=[];const t=[{nestedArrIndex:-1,value:i}];while(t.length){const{nestedArrIndex:s,value:n}=t.pop();if(isDefined(n))if(isString(n)&&!isBlank(n)){let t={v:n,i:s,n:this.norm.get(n)};e.push(t)}else isArray(n)&&n.forEach(((e,s)=>{t.push({nestedArrIndex:s,value:e})}))}s.$[n]=e}else if(isString(i)&&!isBlank(i)){let e={v:i,n:this.norm.get(i)};s.$[n]=e}}));this.records.push(s)}toJSON(){return{keys:this.keys,records:this.records}}}function createIndex(e,t,{getFn:s=o.getFn,fieldNormWeight:n=o.fieldNormWeight}={}){const i=new FuseIndex({getFn:s,fieldNormWeight:n});i.setKeys(e.map(createKey));i.setSources(t);i.create();return i}function parseIndex(e,{getFn:t=o.getFn,fieldNormWeight:s=o.fieldNormWeight}={}){const{keys:n,records:i}=e;const r=new FuseIndex({getFn:t,fieldNormWeight:s});r.setKeys(n);r.setIndexRecords(i);return r}function computeScore$1(e,{errors:t=0,currentLocation:s=0,expectedLocation:n=0,distance:i=o.distance,ignoreLocation:r=o.ignoreLocation}={}){const c=t/e.length;if(r)return c;const u=Math.abs(n-s);return i?c+u/i:u?1:c}function convertMaskToIndices(e=[],t=o.minMatchCharLength){let s=[];let n=-1;let i=-1;let r=0;for(let c=e.length;r<c;r+=1){let c=e[r];if(c&&n===-1)n=r;else if(!c&&n!==-1){i=r-1;i-n+1>=t&&s.push([n,i]);n=-1}}e[r-1]&&r-n>=t&&s.push([n,r-1]);return s}const h=32;function search(e,t,s,{location:n=o.location,distance:i=o.distance,threshold:r=o.threshold,findAllMatches:c=o.findAllMatches,minMatchCharLength:u=o.minMatchCharLength,includeMatches:a=o.includeMatches,ignoreLocation:l=o.ignoreLocation}={}){if(t.length>h)throw new Error(PATTERN_LENGTH_TOO_LARGE(h));const d=t.length;const g=e.length;const f=Math.max(0,Math.min(n,g));let A=r;let p=f;const M=u>1||a;const m=M?Array(g):[];let C;while((C=e.indexOf(t,p))>-1){let e=computeScore$1(t,{currentLocation:C,expectedLocation:f,distance:i,ignoreLocation:l});A=Math.min(e,A);p=C+d;if(M){let e=0;while(e<d){m[C+e]=1;e+=1}}}p=-1;let x=[];let y=1;let F=d+g;const E=1<<d-1;for(let n=0;n<d;n+=1){let r=0;let u=F;while(r<u){const e=computeScore$1(t,{errors:n,currentLocation:f+u,expectedLocation:f,distance:i,ignoreLocation:l});e<=A?r=u:F=u;u=Math.floor((F-r)/2+r)}F=u;let o=Math.max(1,f-u+1);let a=c?g:Math.min(f+u,g)+d;let h=Array(a+2);h[a+1]=(1<<n)-1;for(let r=a;r>=o;r-=1){let c=r-1;let u=s[e.charAt(c)];M&&(m[c]=+!!u);h[r]=(h[r+1]<<1|1)&u;n&&(h[r]|=(x[r+1]|x[r])<<1|1|x[r+1]);if(h[r]&E){y=computeScore$1(t,{errors:n,currentLocation:c,expectedLocation:f,distance:i,ignoreLocation:l});if(y<=A){A=y;p=c;if(p<=f)break;o=Math.max(1,2*f-p)}}}const C=computeScore$1(t,{errors:n+1,currentLocation:f,expectedLocation:f,distance:i,ignoreLocation:l});if(C>A)break;x=h}const D={isMatch:p>=0,score:Math.max(.001,y)};if(M){const e=convertMaskToIndices(m,u);e.length?a&&(D.indices=e):D.isMatch=false}return D}function createPatternAlphabet(e){let t={};for(let s=0,n=e.length;s<n;s+=1){const i=e.charAt(s);t[i]=(t[i]||0)|1<<n-s-1}return t}const l=String.prototype.normalize?e=>e.normalize("NFD").replace(/[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/g,""):e=>e;class BitapSearch{constructor(e,{location:t=o.location,threshold:s=o.threshold,distance:n=o.distance,includeMatches:i=o.includeMatches,findAllMatches:r=o.findAllMatches,minMatchCharLength:c=o.minMatchCharLength,isCaseSensitive:u=o.isCaseSensitive,ignoreDiacritics:a=o.ignoreDiacritics,ignoreLocation:d=o.ignoreLocation}={}){this.options={location:t,threshold:s,distance:n,includeMatches:i,findAllMatches:r,minMatchCharLength:c,isCaseSensitive:u,ignoreDiacritics:a,ignoreLocation:d};e=u?e:e.toLowerCase();e=a?l(e):e;this.pattern=e;this.chunks=[];if(!this.pattern.length)return;const addChunk=(e,t)=>{this.chunks.push({pattern:e,alphabet:createPatternAlphabet(e),startIndex:t})};const g=this.pattern.length;if(g>h){let e=0;const t=g%h;const s=g-t;while(e<s){addChunk(this.pattern.substr(e,h),e);e+=h}if(t){const e=g-h;addChunk(this.pattern.substr(e),e)}}else addChunk(this.pattern,0)}searchIn(e){const{isCaseSensitive:t,ignoreDiacritics:s,includeMatches:n}=this.options;e=t?e:e.toLowerCase();e=s?l(e):e;if(this.pattern===e){let t={isMatch:true,score:0};n&&(t.indices=[[0,e.length-1]]);return t}const{location:i,distance:r,threshold:c,findAllMatches:u,minMatchCharLength:o,ignoreLocation:a}=this.options;let h=[];let d=0;let g=false;this.chunks.forEach((({pattern:t,alphabet:s,startIndex:l})=>{const{isMatch:f,score:A,indices:p}=search(e,t,s,{location:i+l,distance:r,threshold:c,findAllMatches:u,minMatchCharLength:o,includeMatches:n,ignoreLocation:a});f&&(g=true);d+=A;f&&p&&(h=[...h,...p])}));let f={isMatch:g,score:g?d/this.chunks.length:1};g&&n&&(f.indices=h);return f}}class BaseMatch{constructor(e){this.pattern=e}static isMultiMatch(e){return getMatch(e,this.multiRegex)}static isSingleMatch(e){return getMatch(e,this.singleRegex)}search(){}}function getMatch(e,t){const s=e.match(t);return s?s[1]:null}class ExactMatch extends BaseMatch{constructor(e){super(e)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(e){const t=e===this.pattern;return{isMatch:t,score:t?0:1,indices:[0,this.pattern.length-1]}}}class InverseExactMatch extends BaseMatch{constructor(e){super(e)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(e){const t=e.indexOf(this.pattern);const s=t===-1;return{isMatch:s,score:s?0:1,indices:[0,e.length-1]}}}class PrefixExactMatch extends BaseMatch{constructor(e){super(e)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(e){const t=e.startsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[0,this.pattern.length-1]}}}class InversePrefixExactMatch extends BaseMatch{constructor(e){super(e)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(e){const t=!e.startsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[0,e.length-1]}}}class SuffixExactMatch extends BaseMatch{constructor(e){super(e)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(e){const t=e.endsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[e.length-this.pattern.length,e.length-1]}}}class InverseSuffixExactMatch extends BaseMatch{constructor(e){super(e)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(e){const t=!e.endsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[0,e.length-1]}}}class FuzzyMatch extends BaseMatch{constructor(e,{location:t=o.location,threshold:s=o.threshold,distance:n=o.distance,includeMatches:i=o.includeMatches,findAllMatches:r=o.findAllMatches,minMatchCharLength:c=o.minMatchCharLength,isCaseSensitive:u=o.isCaseSensitive,ignoreDiacritics:a=o.ignoreDiacritics,ignoreLocation:h=o.ignoreLocation}={}){super(e);this._bitapSearch=new BitapSearch(e,{location:t,threshold:s,distance:n,includeMatches:i,findAllMatches:r,minMatchCharLength:c,isCaseSensitive:u,ignoreDiacritics:a,ignoreLocation:h})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(e){return this._bitapSearch.searchIn(e)}}class IncludeMatch extends BaseMatch{constructor(e){super(e)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(e){let t=0;let s;const n=[];const i=this.pattern.length;while((s=e.indexOf(this.pattern,t))>-1){t=s+i;n.push([s,t-1])}const r=!!n.length;return{isMatch:r,score:r?0:1,indices:n}}}const d=[ExactMatch,IncludeMatch,PrefixExactMatch,InversePrefixExactMatch,InverseSuffixExactMatch,SuffixExactMatch,InverseExactMatch,FuzzyMatch];const g=d.length;const f=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;const A="|";function parseQuery(e,t={}){return e.split(A).map((e=>{let s=e.trim().split(f).filter((e=>e&&!!e.trim()));let n=[];for(let e=0,i=s.length;e<i;e+=1){const i=s[e];let r=false;let c=-1;while(!r&&++c<g){const e=d[c];let s=e.isMultiMatch(i);if(s){n.push(new e(s,t));r=true}}if(!r){c=-1;while(++c<g){const e=d[c];let s=e.isSingleMatch(i);if(s){n.push(new e(s,t));break}}}}return n}))}const p=new Set([FuzzyMatch.type,IncludeMatch.type]);class ExtendedSearch{constructor(e,{isCaseSensitive:t=o.isCaseSensitive,ignoreDiacritics:s=o.ignoreDiacritics,includeMatches:n=o.includeMatches,minMatchCharLength:i=o.minMatchCharLength,ignoreLocation:r=o.ignoreLocation,findAllMatches:c=o.findAllMatches,location:u=o.location,threshold:a=o.threshold,distance:h=o.distance}={}){this.query=null;this.options={isCaseSensitive:t,ignoreDiacritics:s,includeMatches:n,minMatchCharLength:i,findAllMatches:c,ignoreLocation:r,location:u,threshold:a,distance:h};e=t?e:e.toLowerCase();e=s?l(e):e;this.pattern=e;this.query=parseQuery(this.pattern,this.options)}static condition(e,t){return t.useExtendedSearch}searchIn(e){const t=this.query;if(!t)return{isMatch:false,score:1};const{includeMatches:s,isCaseSensitive:n,ignoreDiacritics:i}=this.options;e=n?e:e.toLowerCase();e=i?l(e):e;let r=0;let c=[];let u=0;for(let n=0,i=t.length;n<i;n+=1){const i=t[n];c.length=0;r=0;for(let t=0,n=i.length;t<n;t+=1){const n=i[t];const{isMatch:o,indices:a,score:h}=n.search(e);if(!o){u=0;r=0;c.length=0;break}r+=1;u+=h;if(s){const e=n.constructor.type;p.has(e)?c=[...c,...a]:c.push(a)}}if(r){let e={isMatch:true,score:u/r};s&&(e.indices=c);return e}}return{isMatch:false,score:1}}}const M=[];function register(...e){M.push(...e)}function createSearcher(e,t){for(let s=0,n=M.length;s<n;s+=1){let n=M[s];if(n.condition(e,t))return new n(e,t)}return new BitapSearch(e,t)}const m={AND:"$and",OR:"$or"};const C={PATH:"$path",PATTERN:"$val"};const isExpression=e=>!!(e[m.AND]||e[m.OR]);const isPath=e=>!!e[C.PATH];const isLeaf=e=>!isArray(e)&&isObject(e)&&!isExpression(e);const convertToExplicit=e=>({[m.AND]:Object.keys(e).map((t=>({[t]:e[t]})))});function parse(e,t,{auto:s=true}={}){const next=e=>{let n=Object.keys(e);const i=isPath(e);if(!i&&n.length>1&&!isExpression(e))return next(convertToExplicit(e));if(isLeaf(e)){const r=i?e[C.PATH]:n[0];const c=i?e[C.PATTERN]:e[r];if(!isString(c))throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(r));const u={keyId:createKeyId(r),pattern:c};s&&(u.searcher=createSearcher(c,t));return u}let r={children:[],operator:n[0]};n.forEach((t=>{const s=e[t];isArray(s)&&s.forEach((e=>{r.children.push(next(e))}))}));return r};isExpression(e)||(e=convertToExplicit(e));return next(e)}function computeScore(e,{ignoreFieldNorm:t=o.ignoreFieldNorm}){e.forEach((e=>{let s=1;e.matches.forEach((({key:e,norm:n,score:i})=>{const r=e?e.weight:null;s*=Math.pow(i===0&&r?Number.EPSILON:i,(r||1)*(t?1:n))}));e.score=s}))}function transformMatches(e,t){const s=e.matches;t.matches=[];isDefined(s)&&s.forEach((e=>{if(!isDefined(e.indices)||!e.indices.length)return;const{indices:s,value:n}=e;let i={indices:s,value:n};e.key&&(i.key=e.key.src);e.idx>-1&&(i.refIndex=e.idx);t.matches.push(i)}))}function transformScore(e,t){t.score=e.score}function format(e,t,{includeMatches:s=o.includeMatches,includeScore:n=o.includeScore}={}){const i=[];s&&i.push(transformMatches);n&&i.push(transformScore);return e.map((e=>{const{idx:s}=e;const n={item:t[s],refIndex:s};i.length&&i.forEach((t=>{t(e,n)}));return n}))}class Fuse{constructor(e,s={},n){this.options={...o,...s};if(this.options.useExtendedSearch&&false)throw new Error(t);this._keyStore=new KeyStore(this.options.keys);this.setCollection(e,n)}setCollection(e,t){this._docs=e;if(t&&!(t instanceof FuseIndex))throw new Error(s);this._myIndex=t||createIndex(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(e){if(isDefined(e)){this._docs.push(e);this._myIndex.add(e)}}remove(e=(()=>false)){const t=[];for(let s=0,n=this._docs.length;s<n;s+=1){const i=this._docs[s];if(e(i,s)){this.removeAt(s);s-=1;n-=1;t.push(i)}}return t}removeAt(e){this._docs.splice(e,1);this._myIndex.removeAt(e)}getIndex(){return this._myIndex}search(e,{limit:t=-1}={}){const{includeMatches:s,includeScore:n,shouldSort:i,sortFn:r,ignoreFieldNorm:c}=this.options;let u=isString(e)?isString(this._docs[0])?this._searchStringList(e):this._searchObjectList(e):this._searchLogical(e);computeScore(u,{ignoreFieldNorm:c});i&&u.sort(r);isNumber(t)&&t>-1&&(u=u.slice(0,t));return format(u,this._docs,{includeMatches:s,includeScore:n})}_searchStringList(e){const t=createSearcher(e,this.options);const{records:s}=this._myIndex;const n=[];s.forEach((({v:e,i:s,n:i})=>{if(!isDefined(e))return;const{isMatch:r,score:c,indices:u}=t.searchIn(e);r&&n.push({item:e,idx:s,matches:[{score:c,value:e,norm:i,indices:u}]})}));return n}_searchLogical(e){const t=parse(e,this.options);const evaluate=(e,t,s)=>{if(!e.children){const{keyId:n,searcher:i}=e;const r=this._findMatches({key:this._keyStore.get(n),value:this._myIndex.getValueForItemAtKeyId(t,n),searcher:i});return r&&r.length?[{idx:s,item:t,matches:r}]:[]}const n=[];for(let i=0,r=e.children.length;i<r;i+=1){const r=e.children[i];const c=evaluate(r,t,s);if(c.length)n.push(...c);else if(e.operator===m.AND)return[]}return n};const s=this._myIndex.records;const n={};const i=[];s.forEach((({$:e,i:s})=>{if(isDefined(e)){let r=evaluate(t,e,s);if(r.length){if(!n[s]){n[s]={idx:s,item:e,matches:[]};i.push(n[s])}r.forEach((({matches:e})=>{n[s].matches.push(...e)}))}}}));return i}_searchObjectList(e){const t=createSearcher(e,this.options);const{keys:s,records:n}=this._myIndex;const i=[];n.forEach((({$:e,i:n})=>{if(!isDefined(e))return;let r=[];s.forEach(((s,n)=>{r.push(...this._findMatches({key:s,value:e[n],searcher:t}))}));r.length&&i.push({idx:n,item:e,matches:r})}));return i}_findMatches({key:e,value:t,searcher:s}){if(!isDefined(t))return[];let n=[];if(isArray(t))t.forEach((({v:t,i:i,n:r})=>{if(!isDefined(t))return;const{isMatch:c,score:u,indices:o}=s.searchIn(t);c&&n.push({score:u,key:e,value:t,idx:i,norm:r,indices:o})}));else{const{v:i,n:r}=t;const{isMatch:c,score:u,indices:o}=s.searchIn(i);c&&n.push({score:u,key:e,value:i,norm:r,indices:o})}return n}}Fuse.version="7.1.0";Fuse.createIndex=createIndex;Fuse.parseIndex=parseIndex;Fuse.config=o;Fuse.parseQuery=parse;register(ExtendedSearch);export{Fuse as default};

